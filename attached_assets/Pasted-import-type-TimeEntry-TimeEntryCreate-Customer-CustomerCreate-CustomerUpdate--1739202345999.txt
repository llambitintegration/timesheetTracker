import type {
  TimeEntry,
  TimeEntryCreate,
  Customer,
  CustomerCreate,
  CustomerUpdate,
  Project,
  ProjectCreate,
  ProjectBase,
  ProjectManager,
  ProjectManagerCreate,
  ProjectManagerUpdate,
  TimeSummary,
  WeeklyReport,
  MonthlyReport,
} from "@/types/schemas"
import { toast } from "@/components/ui/use-toast"

const API_BASE_URL = "https://6ed7ce35-85b3-498b-9e9b-4d63631ed8e3-00-2owzgyvztotfg.worf.replit.dev"

export class ApiError extends Error {
  constructor(
    public status: number,
    message: string,
    public data?: any,
  ) {
    super(message)
    this.name = "ApiError"
  }
}

async function handleResponse<T>(response: Response): Promise<T> {
  if (!response.ok) {
    const errorBody = await response.text()
    console.error(`HTTP error! status: ${response.status}, body: ${errorBody}`)
    try {
      const errorJson = JSON.parse(errorBody)
      throw new ApiError(response.status, errorJson.detail || `HTTP error! status: ${response.status}`, errorJson)
    } catch (e) {
      throw new ApiError(response.status, `HTTP error! status: ${response.status}`, errorBody)
    }
  }
  return response.json()
}

async function fetchWithRetry(url: string, options: RequestInit, retries = 3): Promise<Response> {
  try {
    const response = await fetch(url, {
      ...options,
      credentials: "include",
      headers: {
        ...options.headers,
        "Content-Type": "application/json",
      },
    })
    if (!response.ok && retries > 0) {
      console.log(`Retrying fetch to ${url}. Attempts left: ${retries - 1}`)
      return fetchWithRetry(url, options, retries - 1)
    }
    return response
  } catch (error) {
    if (retries > 0) {
      console.log(`Retrying fetch to ${url}. Attempts left: ${retries - 1}`)
      return fetchWithRetry(url, options, retries - 1)
    }
    throw error
  }
}

export const apiClient = {
  // Time Entries
  async createTimeEntry(entry: TimeEntryCreate): Promise<TimeEntry> {
    const response = await fetchWithRetry(`${API_BASE_URL}/time-entries/`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(entry),
      credentials: "include",
    })
    return handleResponse(response)
  },

  async getTimeEntries(skip = 0, limit = 100): Promise<{ data: TimeEntry[]; total: number }> {
    const params = new URLSearchParams({ skip: skip.toString(), limit: limit.toString() })
    const response = await fetchWithRetry(`${API_BASE_URL}/time-entries/?${params}`, {
      credentials: "include",
    })
    const data = await handleResponse<TimeEntry[]>(response)
    const total = Number.parseInt(response.headers.get("X-Total-Count") || "0", 10)
    return { data, total }
  },

  async getTimeEntry(id: number): Promise<TimeEntry> {
    const response = await fetchWithRetry(`${API_BASE_URL}/time-entries/${id}`, {
      credentials: "include",
    })
    return handleResponse(response)
  },

  async updateTimeEntry(id: number, entry: Partial<TimeEntryCreate>): Promise<TimeEntry> {
    const response = await fetchWithRetry(`${API_BASE_URL}/time-entries/${id}`, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(entry),
      credentials: "include",
    })
    return handleResponse(response)
  },

  async deleteTimeEntry(id: number): Promise<void> {
    const response = await fetchWithRetry(`${API_BASE_URL}/time-entries/${id}`, {
      method: "DELETE",
      credentials: "include",
    })
    return handleResponse(response)
  },

  // Time Summaries
  async getTimeSummaries(
    startDate: string,
    endDate: string,
    projectId?: string,
    customerName?: string,
  ): Promise<TimeSummary> {
    const params = new URLSearchParams({
      start_date: startDate,
      end_date: endDate,
    })
    if (projectId) params.append("project_id", projectId)
    if (customerName) params.append("customer_name", customerName)
    try {
      const response = await fetchWithRetry(`${API_BASE_URL}/time-summaries/?${params}`, {
        method: "GET",
      })
      if (!response.ok) {
        const errorText = await response.text()
        throw new ApiError(response.status, `HTTP error! status: ${response.status}`, errorText)
      }
      const data = await response.json()
      if (!data || !data.entries || data.entries.length === 0) {
        throw new Error("No data available for the selected period")
      }
      return data
    } catch (error) {
      console.error("Error in getTimeSummaries:", error)
      if (error instanceof ApiError) {
        throw error
      } else if (error instanceof Error) {
        throw new ApiError(500, error.message)
      } else {
        throw new ApiError(500, "An unknown error occurred")
      }
    }
  },

  // Reports
  async getWeeklyReport(date?: string, projectId?: string): Promise<WeeklyReport> {
    const params = new URLSearchParams()
    if (date) params.append("date", date)
    if (projectId) params.append("project_id", projectId)
    const response = await fetchWithRetry(`${API_BASE_URL}/reports/weekly?${params}`, {
      credentials: "include",
    })
    return handleResponse(response)
  },

  async getMonthlyReport(year: number, month: number, projectId?: string): Promise<MonthlyReport> {
    const params = new URLSearchParams({
      year: year.toString(),
      month: month.toString(),
    })
    if (projectId) params.append("project_id", projectId)
    const response = await fetchWithRetry(`${API_BASE_URL}/reports/monthly?${params}`, {
      credentials: "include",
    })
    return handleResponse(response)
  },

  // Customers
  async getCustomers(skip = 0, limit = 100): Promise<{ data: Customer[]; total: number }> {
    const params = new URLSearchParams({ skip: skip.toString(), limit: limit.toString() })
    const response = await fetchWithRetry(`${API_BASE_URL}/customers/?${params}`, {
      credentials: "include",
    })
    const data = await handleResponse<Customer[]>(response)
    const total = Number.parseInt(response.headers.get("X-Total-Count") || "0", 10)
    return { data, total }
  },

  async getCustomer(id: number): Promise<Customer> {
    const response = await fetchWithRetry(`${API_BASE_URL}/customers/${id}`, {
      credentials: "include",
    })
    return handleResponse(response)
  },

  async createCustomer(customer: CustomerCreate): Promise<Customer> {
    const response = await fetchWithRetry(`${API_BASE_URL}/customers/`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(customer),
      credentials: "include",
    })
    return handleResponse(response)
  },

  async updateCustomer(id: number, update: CustomerUpdate): Promise<Customer> {
    const response = await fetchWithRetry(`${API_BASE_URL}/customers/${id}`, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(update),
      credentials: "include",
    })
    return handleResponse(response)
  },

  async deleteCustomer(id: number): Promise<void> {
    const response = await fetchWithRetry(`${API_BASE_URL}/customers/${id}`, {
      method: "DELETE",
      credentials: "include",
    })
    return handleResponse(response)
  },

  // Project Managers
  async getProjectManagers(skip = 0, limit = 100): Promise<{ data: ProjectManager[]; total: number }> {
    const params = new URLSearchParams({ skip: skip.toString(), limit: limit.toString() })
    const response = await fetchWithRetry(`${API_BASE_URL}/project-managers/?${params}`, {
      credentials: "include",
    })
    const data = await handleResponse<ProjectManager[]>(response)
    const total = Number.parseInt(response.headers.get("X-Total-Count") || "0", 10)
    return { data, total }
  },

  async getProjectManager(id: number): Promise<ProjectManager> {
    const response = await fetchWithRetry(`${API_BASE_URL}/project-managers/${id}`, {
      credentials: "include",
    })
    return handleResponse(response)
  },

  async createProjectManager(manager: ProjectManagerCreate): Promise<ProjectManager> {
    const response = await fetchWithRetry(`${API_BASE_URL}/project-managers/`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(manager),
      credentials: "include",
    })
    return handleResponse(response)
  },

  async updateProjectManager(id: number, update: ProjectManagerUpdate): Promise<ProjectManager> {
    const response = await fetchWithRetry(`${API_BASE_URL}/project-managers/${id}`, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(update),
      credentials: "include",
    })
    return handleResponse(response)
  },

  async deleteProjectManager(id: number): Promise<void> {
    const response = await fetchWithRetry(`${API_BASE_URL}/project-managers/${id}`, {
      method: "DELETE",
      credentials: "include",
    })
    return handleResponse(response)
  },

  // Projects
  async getProjects(skip = 0, limit = 100): Promise<{ data: Project[]; total: number }> {
    const params = new URLSearchParams({ skip: skip.toString(), limit: limit.toString() })
    const response = await fetchWithRetry(`${API_BASE_URL}/projects/?${params}`, {
      credentials: "include",
    })
    const data = await handleResponse<Project[]>(response)
    const total = Number.parseInt(response.headers.get("X-Total-Count") || "0", 10)
    return { data, total }
  },

  async getProject(id: number): Promise<Project> {
    const response = await fetchWithRetry(`${API_BASE_URL}/projects/${id}`, {
      credentials: "include",
    })
    return handleResponse(response)
  },

  async createProject(project: ProjectCreate): Promise<Project> {
    const response = await fetchWithRetry(`${API_BASE_URL}/projects/`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(project),
      credentials: "include",
    })
    return handleResponse(response)
  },

  async updateProject(id: number, update: ProjectBase): Promise<Project> {
    const response = await fetchWithRetry(`${API_BASE_URL}/projects/${id}`, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(update),
      credentials: "include",
    })
    return handleResponse(response)
  },

  async deleteProject(id: number): Promise<void> {
    const response = await fetchWithRetry(`${API_BASE_URL}/projects/${id}`, {
      method: "DELETE",
      credentials: "include",
    })
    return handleResponse(response)
  },

  // Database
  async initializeDatabase(force = false): Promise<void> {
    const response = await fetchWithRetry(`${API_BASE_URL}/init-db/?force=${force}`, {
      method: "POST",
      credentials: "include",
    })
    return handleResponse(response)
  },

  async getDatabaseStatus(): Promise<void> {
    const response = await fetchWithRetry(`${API_BASE_URL}/init-db/`, {
      credentials: "include",
    })
    return handleResponse(response)
  },
}

// Error handling wrapper
export async function withErrorHandling<T>(operation: () => Promise<T>): Promise<T> {
  try {
    return await operation()
  } catch (error) {
    if (error instanceof ApiError) {
      toast({
        title: "API Error",
        description: `Status ${error.status}: ${error.message}`,
        variant: "destructive",
      })
    } else {
      toast({
        title: "Unexpected Error",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive",
      })
    }
    throw error
  }
}

