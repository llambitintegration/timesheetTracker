@app.put("/projects/{project_id}", response_model=schemas.Project)
def update_project(project_id: str, project: schemas.ProjectUpdate, db: Session = Depends(get_db)):
    """Update an existing project"""
    service = ProjectService(db)
    return service.update_project(project_id, project)

@app.delete("/projects/{project_id}")
def delete_project(project_id: str, db: Session = Depends(get_db)):
    """Delete a project"""
    service = ProjectService(db)
    return service.delete_project(project_id)

@app.get("/project-managers", response_model=List[schemas.ProjectManager])
def get_project_managers(db: Session = Depends(get_db)):
    """Get all project managers"""
    service = ProjectManagerService(db)
    return service.get_all_project_managers()

@app.post("/project-managers", response_model=schemas.ProjectManager)
def create_project_manager(manager: schemas.ProjectManagerCreate, db: Session = Depends(get_db)):
    """Create a new project manager"""
    service = ProjectManagerService(db)
    return service.create_project_manager(manager)

@app.put("/project-managers/{email}", response_model=schemas.ProjectManager)
def update_project_manager(email: str, manager: schemas.ProjectManagerUpdate, db: Session = Depends(get_db)):
    """Update an existing project manager"""
    service = ProjectManagerService(db)
    return service.update_project_manager(email, manager)

@app.delete("/project-managers/{email}")
def delete_project_manager(email: str, db: Session = Depends(get_db)):
    """Delete a project manager"""
    service = ProjectManagerService(db)
    return service.delete_project_manager(email)

@app.get("/customers", response_model=List[schemas.Customer])
def get_customers(db: Session = Depends(get_db)):
    """Get all customers"""
    service = CustomerService(db)
    return service.get_all_customers()

@app.post("/customers", response_model=schemas.Customer)
def create_customer(customer: schemas.CustomerCreate, db: Session = Depends(get_db)):
    """Create a new customer"""
    service = CustomerService(db)
    return service.create_customer(customer)

@app.put("/customers/{name}", response_model=schemas.Customer)
def update_customer(name: str, customer: schemas.CustomerUpdate, db: Session = Depends(get_db)):
    """Update an existing customer"""
    service = CustomerService(db)
    return service.update_customer(name, customer)

@app.delete("/customers/{name}")
def delete_customer(name: str, db: Session = Depends(get_db)):
    """Delete a customer"""
    service = CustomerService(db)
    return service.delete_customer(name)

@app.post("/time-entries/upload/")
async def upload_timesheet(
    file: UploadFile = File(...),
    db: Session = Depends(get_db)
):
    """Upload and process timesheet file"""
    logger.info(f"Processing timesheet upload: {file.filename}")

    # Check file extension
    allowed_extensions = ['.txt', '.csv', '.xlsx']
    file_extension = os.path.splitext(file.filename)[1].lower()
