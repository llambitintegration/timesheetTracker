============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /home/runner/workspace/.pythonlibs/bin/python
cachedir: .pytest_cache
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: anyio-4.7.0, asyncio-0.25.2, cov-6.0.0
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None
collecting ... collected 7 items / 6 deselected / 1 selected
run-last-failure: rerun previous 1 failure (skipped 10 files)

tests/test_file_upload.py::test_dash_customer_handling FAILED            [100%]

=================================== FAILURES ===================================
_________________________ test_dash_customer_handling __________________________

client = <starlette.testclient.TestClient object at 0x7f0b183d4a10>
setup_test_data = {'customers': [<models.customerModel.Customer object at 0x7f0b17f81990>, <models.customerModel.Customer object at 0x7f...project_id=Unassigned, name=Unassigned)>, <Project(id=2, project_id=Project_Magic_Bullet, name=Project Magic Bullet)>]}
tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-38/test_dash_customer_handling0')

    def test_dash_customer_handling(client, setup_test_data, tmp_path):
        """Test handling of dash (-) values in customer field"""
        data = {
            'Category': ['Development'],
            'Customer': ['-'],
            'Project': ['-'],
            'Hours': [8.0],
            'Date': ['2024-10-07']
        }
        excel_file = create_test_excel(tmp_path, data)
    
        with open(excel_file, "rb") as f:
            response = client.post(
                "/time-entries/upload/",
                files={"file": ("test.xlsx", f, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")}
            )
    
        assert response.status_code == 201
        entries = response.json()["entries"]
        assert len(entries) == 1
>       assert entries[0]["customer"] is None
E       AssertionError: assert 'Unassigned' is None

tests/test_file_upload.py:96: AssertionError
----------------------------- Captured stdout call -----------------------------
{"timestamp": "2025-02-11T20:27:03.604280", "level": "INFO", "correlation_id": "788988ca-9894-40c8-afe5-898099495ad6", "logger": "TimesheetTracker", "message": "Incoming request", "context": {"correlation_id": "788988ca-9894-40c8-afe5-898099495ad6", "method": "POST", "url": "http://testserver/time-entries/upload/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "5236", "content-type": "multipart/form-data; boundary=c6c068bbe0f3c022e96be4f03254458f"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/upload/"}}
{"timestamp": "2025-02-11T20:27:03.607000", "level": "INFO", "correlation_id": "788988ca-9894-40c8-afe5-898099495ad6", "logger": "TimesheetTracker", "message": "Processing timesheet upload: test.xlsx", "context": {}}
{"timestamp": "2025-02-11T20:27:03.607316", "level": "DEBUG", "correlation_id": "788988ca-9894-40c8-afe5-898099495ad6", "logger": "TimesheetTracker", "message": "TimesheetService initialized", "context": {}}
{"timestamp": "2025-02-11T20:27:03.607655", "level": "INFO", "correlation_id": "788988ca-9894-40c8-afe5-898099495ad6", "logger": "TimesheetTracker", "message": "Processing timesheet upload: test.xlsx", "context": {}}
{"timestamp": "2025-02-11T20:27:03.624842", "level": "INFO", "correlation_id": "788988ca-9894-40c8-afe5-898099495ad6", "logger": "TimesheetTracker", "message": "Successfully parsed 1 records from Excel file", "context": {}}
{"timestamp": "2025-02-11T20:27:03.656023", "level": "WARNING", "correlation_id": "788988ca-9894-40c8-afe5-898099495ad6", "logger": "TimesheetTracker", "message": "Request failed with status 201", "context": {"correlation_id": "788988ca-9894-40c8-afe5-898099495ad6", "status_code": 201, "method": "POST", "url": "http://testserver/time-entries/upload/", "process_time_ms": "51.77", "response_headers": {"content-length": "317", "content-type": "application/json"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/upload/", "origin": null, "cors_method": null, "cors_headers": null}}
{"timestamp": "2025-02-11T20:27:03.656474", "level": "DEBUG", "correlation_id": "788988ca-9894-40c8-afe5-898099495ad6", "logger": "TimesheetTracker", "message": "Adding CORS headers to response", "context": {"correlation_id": null, "method": "POST", "path": "/time-entries/upload/", "status_code": 201}}
------------------------------ Captured log call -------------------------------
INFO     TimesheetTracker:logger.py:29 {"message": "Incoming request", "timestamp": "2025-02-11T20:27:03.604435", "context": {"correlation_id": "788988ca-9894-40c8-afe5-898099495ad6", "method": "POST", "url": "http://testserver/time-entries/upload/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "5236", "content-type": "multipart/form-data; boundary=c6c068bbe0f3c022e96be4f03254458f"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/upload/"}}
INFO     TimesheetTracker:logger.py:32 {"message": "Processing timesheet upload: test.xlsx", "timestamp": "2025-02-11T20:27:03.607112", "context": {}}
DEBUG    TimesheetTracker:logger.py:32 {"message": "TimesheetService initialized", "timestamp": "2025-02-11T20:27:03.607412", "context": {}}
INFO     TimesheetTracker:logger.py:32 {"message": "Processing timesheet upload: test.xlsx", "timestamp": "2025-02-11T20:27:03.607747", "context": {}}
INFO     TimesheetTracker:logger.py:32 {"message": "Successfully parsed 1 records from Excel file", "timestamp": "2025-02-11T20:27:03.624958", "context": {}}
WARNING  TimesheetTracker:logger.py:29 {"message": "Request failed with status 201", "timestamp": "2025-02-11T20:27:03.656160", "context": {"correlation_id": "788988ca-9894-40c8-afe5-898099495ad6", "status_code": 201, "method": "POST", "url": "http://testserver/time-entries/upload/", "process_time_ms": "51.77", "response_headers": {"content-length": "317", "content-type": "application/json"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/upload/", "origin": null, "cors_method": null, "cors_headers": null}}
DEBUG    TimesheetTracker:logger.py:29 {"message": "Adding CORS headers to response", "timestamp": "2025-02-11T20:27:03.656557", "context": {"correlation_id": null, "method": "POST", "path": "/time-entries/upload/", "status_code": 201}}
=============================== warnings summary ===============================
.pythonlibs/lib/python3.11/site-packages/pydantic/_internal/_config.py:345
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/pydantic/_internal/_config.py:345: UserWarning: Valid config keys have changed in V2:
  * 'orm_mode' has been renamed to 'from_attributes'
    warnings.warn(message, UserWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_file_upload.py::test_dash_customer_handling - AssertionErro...
================== 1 failed, 6 deselected, 1 warning in 0.71s ==================
