============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /home/runner/workspace/.pythonlibs/bin/python
cachedir: .pytest_cache
rootdir: /home/runner/workspace
configfile: pyproject.toml
plugins: anyio-4.7.0, asyncio-0.25.2, cov-6.0.0
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None
collecting ... collected 30 items / 6 deselected / 24 selected
run-last-failure: rerun previous 24 failures (skipped 5 files)

tests/test_file_upload.py::test_xls_analyzer_valid FAILED                [  4%]
tests/test_file_upload.py::test_xls_analyzer_invalid_data FAILED         [  8%]
tests/test_file_upload.py::test_upload_excel_valid FAILED                [ 12%]
tests/test_file_upload.py::test_xls_analyzer_date_conversion FAILED      [ 16%]
tests/test_file_upload.py::test_xls_analyzer_missing_columns FAILED      [ 20%]
tests/test_interfaces.py::test_project_interface FAILED                  [ 25%]
tests/test_models.py::test_model_timestamps FAILED                       [ 29%]
tests/test_repositories.py::test_time_entry_repository_create FAILED     [ 33%]
tests/test_repositories.py::test_time_entry_repository_get_by_id FAILED  [ 37%]
tests/test_repositories.py::test_time_entry_repository_get_by_date FAILED [ 41%]
tests/test_repositories.py::test_time_entry_repository_get_all FAILED    [ 45%]
tests/test_repositories.py::test_time_entry_repository_update FAILED     [ 50%]
tests/test_repositories.py::test_time_entry_repository_delete FAILED     [ 54%]
tests/test_repositories.py::test_time_entry_repository_pagination FAILED [ 58%]
tests/test_routes.py::test_create_time_entry FAILED                      [ 62%]
tests/test_routes.py::test_get_time_entries_with_database_query FAILED   [ 66%]
tests/test_routes.py::test_get_time_entries_complex_filtering FAILED     [ 70%]
tests/test_routes.py::test_upload_excel_valid FAILED                     [ 75%]
tests/test_routes.py::test_upload_csv_valid FAILED                       [ 79%]
tests/test_routes.py::test_upload_csv_invalid_format FAILED              [ 83%]
tests/test_routes.py::test_upload_csv_with_validation_errors FAILED      [ 87%]
tests/test_routes.py::test_upload_csv_with_foreign_key_violation FAILED  [ 91%]
tests/test_routes.py::test_upload_csv_with_mismatched_customer_project FAILED [ 95%]
tests/test_routes.py::test_upload_csv_with_multiple_validation_errors FAILED [100%]

=================================== FAILURES ===================================
___________________________ test_xls_analyzer_valid ____________________________

file_contents = b'PK\x03\x04\x14\x00\x00\x00\x08\x00\xe4\x9bKZF\xc7MH\x95\x00\x00\x00\xcd\x00\x00\x00\x10\x00\x00\x00docProps/app.xmlM...\x80\x01\x96\x10\x00\x00[Content_Types].xmlPK\x05\x06\x00\x00\x00\x00\t\x00\t\x00>\x02\x00\x00\xe0\x11\x00\x00\x00\x00'

    @staticmethod
    def read_excel(file_contents: bytes) -> List[Dict[str, Any]]:
        """Read Excel file and return list of dictionaries with data."""
        try:
            # Read first sheet from Excel file
>           df = pd.read_excel(
                file_contents,
                sheet_name=0,
                dtype={
                    'Week Number': 'Int64',
                    'Month': str,
                    'Category': str,
                    'Subcategory': str,
                    'Customer': str,
                    'Project': str,
                    'Task Description': str
                },
                encoding='utf-8'
            )
E           TypeError: read_excel() got an unexpected keyword argument 'encoding'

utils/xls_analyzer.py:15: TypeError

During handling of the above exception, another exception occurred:

tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-1/test_xls_analyzer_valid0')
valid_timesheet_data = {'Category': ['Development', 'Testing'], 'Customer': ['ECOLAB', 'ECOLAB'], 'Date': ['2024-10-07', '2024-10-07'], 'Hours': [8.0, 4.0], ...}

    def test_xls_analyzer_valid(tmp_path, valid_timesheet_data):
        """Test XLSAnalyzer with valid data"""
        excel_file = create_test_excel(tmp_path, valid_timesheet_data)
    
        with open(excel_file, "rb") as f:
            contents = f.read()
            analyzer = XLSAnalyzer()
>           records = analyzer.read_excel(contents)

tests/test_file_upload.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

file_contents = b'PK\x03\x04\x14\x00\x00\x00\x08\x00\xe4\x9bKZF\xc7MH\x95\x00\x00\x00\xcd\x00\x00\x00\x10\x00\x00\x00docProps/app.xmlM...\x80\x01\x96\x10\x00\x00[Content_Types].xmlPK\x05\x06\x00\x00\x00\x00\t\x00\t\x00>\x02\x00\x00\xe0\x11\x00\x00\x00\x00'

    @staticmethod
    def read_excel(file_contents: bytes) -> List[Dict[str, Any]]:
        """Read Excel file and return list of dictionaries with data."""
        try:
            # Read first sheet from Excel file
            df = pd.read_excel(
                file_contents,
                sheet_name=0,
                dtype={
                    'Week Number': 'Int64',
                    'Month': str,
                    'Category': str,
                    'Subcategory': str,
                    'Customer': str,
                    'Project': str,
                    'Task Description': str
                },
                encoding='utf-8'
            )
    
            # Drop rows where all elements are NaN
            df = df.dropna(how='all')
    
            # Convert date column to datetime
            df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
    
            # Fill NaN values with appropriate defaults
            df = df.fillna({
                'Customer': '-',
                'Project': '-',
                'Task Description': '',
                'Week Number': 0,
                'Month': '',
                'Category': 'Other',
                'Subcategory': 'Other'
            })
    
            # Convert DataFrame to list of dictionaries
            records = df.to_dict('records')
    
            logger.info(f"Successfully parsed {len(records)} records from Excel file")
            return records
    
        except Exception as e:
            logger.error(f"Error parsing Excel file: {str(e)}")
>           raise ValueError(f"Failed to parse Excel file: {str(e)}")
E           ValueError: Failed to parse Excel file: read_excel() got an unexpected keyword argument 'encoding'

utils/xls_analyzer.py:55: ValueError
----------------------------- Captured stdout call -----------------------------
{"timestamp": "2025-02-11T19:31:08.517562", "level": "ERROR", "correlation_id": "undefined", "logger": "TimesheetTracker", "message": "Error parsing Excel file: read_excel() got an unexpected keyword argument 'encoding'", "context": {}}
------------------------------ Captured log call -------------------------------
ERROR    TimesheetTracker:logger.py:32 {"message": "Error parsing Excel file: read_excel() got an unexpected keyword argument 'encoding'", "timestamp": "2025-02-11T19:31:08.517674", "context": {}}
________________________ test_xls_analyzer_invalid_data ________________________

file_contents = b'PK\x03\x04\x14\x00\x00\x00\x08\x00\xe4\x9bKZF\xc7MH\x95\x00\x00\x00\xcd\x00\x00\x00\x10\x00\x00\x00docProps/app.xmlM...x00\x80\x01\xd6\x0f\x00\x00[Content_Types].xmlPK\x05\x06\x00\x00\x00\x00\t\x00\t\x00>\x02\x00\x00 \x11\x00\x00\x00\x00'

    @staticmethod
    def read_excel(file_contents: bytes) -> List[Dict[str, Any]]:
        """Read Excel file and return list of dictionaries with data."""
        try:
            # Read first sheet from Excel file
>           df = pd.read_excel(
                file_contents,
                sheet_name=0,
                dtype={
                    'Week Number': 'Int64',
                    'Month': str,
                    'Category': str,
                    'Subcategory': str,
                    'Customer': str,
                    'Project': str,
                    'Task Description': str
                },
                encoding='utf-8'
            )
E           TypeError: read_excel() got an unexpected keyword argument 'encoding'

utils/xls_analyzer.py:15: TypeError

During handling of the above exception, another exception occurred:

tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-1/test_xls_analyzer_invalid_data0')
invalid_timesheet_data = {'Category': ['Development'], 'Date': ['2024-10-07'], 'Hours': [8.0]}

    def test_xls_analyzer_invalid_data(tmp_path, invalid_timesheet_data):
        """Test XLSAnalyzer with invalid data"""
        excel_file = create_test_excel(tmp_path, invalid_timesheet_data)
    
        with open(excel_file, "rb") as f:
            contents = f.read()
            analyzer = XLSAnalyzer()
>           records = analyzer.read_excel(contents)

tests/test_file_upload.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

file_contents = b'PK\x03\x04\x14\x00\x00\x00\x08\x00\xe4\x9bKZF\xc7MH\x95\x00\x00\x00\xcd\x00\x00\x00\x10\x00\x00\x00docProps/app.xmlM...x00\x80\x01\xd6\x0f\x00\x00[Content_Types].xmlPK\x05\x06\x00\x00\x00\x00\t\x00\t\x00>\x02\x00\x00 \x11\x00\x00\x00\x00'

    @staticmethod
    def read_excel(file_contents: bytes) -> List[Dict[str, Any]]:
        """Read Excel file and return list of dictionaries with data."""
        try:
            # Read first sheet from Excel file
            df = pd.read_excel(
                file_contents,
                sheet_name=0,
                dtype={
                    'Week Number': 'Int64',
                    'Month': str,
                    'Category': str,
                    'Subcategory': str,
                    'Customer': str,
                    'Project': str,
                    'Task Description': str
                },
                encoding='utf-8'
            )
    
            # Drop rows where all elements are NaN
            df = df.dropna(how='all')
    
            # Convert date column to datetime
            df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
    
            # Fill NaN values with appropriate defaults
            df = df.fillna({
                'Customer': '-',
                'Project': '-',
                'Task Description': '',
                'Week Number': 0,
                'Month': '',
                'Category': 'Other',
                'Subcategory': 'Other'
            })
    
            # Convert DataFrame to list of dictionaries
            records = df.to_dict('records')
    
            logger.info(f"Successfully parsed {len(records)} records from Excel file")
            return records
    
        except Exception as e:
            logger.error(f"Error parsing Excel file: {str(e)}")
>           raise ValueError(f"Failed to parse Excel file: {str(e)}")
E           ValueError: Failed to parse Excel file: read_excel() got an unexpected keyword argument 'encoding'

utils/xls_analyzer.py:55: ValueError
----------------------------- Captured stdout call -----------------------------
{"timestamp": "2025-02-11T19:31:08.599900", "level": "ERROR", "correlation_id": "undefined", "logger": "TimesheetTracker", "message": "Error parsing Excel file: read_excel() got an unexpected keyword argument 'encoding'", "context": {}}
------------------------------ Captured log call -------------------------------
ERROR    TimesheetTracker:logger.py:32 {"message": "Error parsing Excel file: read_excel() got an unexpected keyword argument 'encoding'", "timestamp": "2025-02-11T19:31:08.600006", "context": {}}
___________________________ test_upload_excel_valid ____________________________
Fixture "valid_timesheet_data" called directly. Fixtures are not meant to be called directly,
but are created automatically when test functions request them as parameters.
See https://docs.pytest.org/en/stable/explanation/fixtures.html for more information about fixtures, and
https://docs.pytest.org/en/stable/deprecations.html#calling-fixtures-directly about how to update your code.
______________________ test_xls_analyzer_date_conversion _______________________

file_contents = b'PK\x03\x04\x14\x00\x00\x00\x08\x00\xe4\x9bKZF\xc7MH\x95\x00\x00\x00\xcd\x00\x00\x00\x10\x00\x00\x00docProps/app.xmlM...x00\x80\x01\xeb\x0f\x00\x00[Content_Types].xmlPK\x05\x06\x00\x00\x00\x00\t\x00\t\x00>\x02\x00\x005\x11\x00\x00\x00\x00'

    @staticmethod
    def read_excel(file_contents: bytes) -> List[Dict[str, Any]]:
        """Read Excel file and return list of dictionaries with data."""
        try:
            # Read first sheet from Excel file
>           df = pd.read_excel(
                file_contents,
                sheet_name=0,
                dtype={
                    'Week Number': 'Int64',
                    'Month': str,
                    'Category': str,
                    'Subcategory': str,
                    'Customer': str,
                    'Project': str,
                    'Task Description': str
                },
                encoding='utf-8'
            )
E           TypeError: read_excel() got an unexpected keyword argument 'encoding'

utils/xls_analyzer.py:15: TypeError

During handling of the above exception, another exception occurred:

tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-1/test_xls_analyzer_date_convers0')

    def test_xls_analyzer_date_conversion(tmp_path):
        """Test date conversion in XLSAnalyzer"""
        data = {
            'Date': ['2024-10-07', '2024-10-08'],
            'Week Number': [41, 41],
            'Category': ['Test', 'Test']
        }
        excel_file = create_test_excel(tmp_path, data)
    
        with open(excel_file, "rb") as f:
            contents = f.read()
            analyzer = XLSAnalyzer()
>           records = analyzer.read_excel(contents)

tests/test_file_upload.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

file_contents = b'PK\x03\x04\x14\x00\x00\x00\x08\x00\xe4\x9bKZF\xc7MH\x95\x00\x00\x00\xcd\x00\x00\x00\x10\x00\x00\x00docProps/app.xmlM...x00\x80\x01\xeb\x0f\x00\x00[Content_Types].xmlPK\x05\x06\x00\x00\x00\x00\t\x00\t\x00>\x02\x00\x005\x11\x00\x00\x00\x00'

    @staticmethod
    def read_excel(file_contents: bytes) -> List[Dict[str, Any]]:
        """Read Excel file and return list of dictionaries with data."""
        try:
            # Read first sheet from Excel file
            df = pd.read_excel(
                file_contents,
                sheet_name=0,
                dtype={
                    'Week Number': 'Int64',
                    'Month': str,
                    'Category': str,
                    'Subcategory': str,
                    'Customer': str,
                    'Project': str,
                    'Task Description': str
                },
                encoding='utf-8'
            )
    
            # Drop rows where all elements are NaN
            df = df.dropna(how='all')
    
            # Convert date column to datetime
            df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
    
            # Fill NaN values with appropriate defaults
            df = df.fillna({
                'Customer': '-',
                'Project': '-',
                'Task Description': '',
                'Week Number': 0,
                'Month': '',
                'Category': 'Other',
                'Subcategory': 'Other'
            })
    
            # Convert DataFrame to list of dictionaries
            records = df.to_dict('records')
    
            logger.info(f"Successfully parsed {len(records)} records from Excel file")
            return records
    
        except Exception as e:
            logger.error(f"Error parsing Excel file: {str(e)}")
>           raise ValueError(f"Failed to parse Excel file: {str(e)}")
E           ValueError: Failed to parse Excel file: read_excel() got an unexpected keyword argument 'encoding'

utils/xls_analyzer.py:55: ValueError
----------------------------- Captured stdout call -----------------------------
{"timestamp": "2025-02-11T19:31:08.974158", "level": "ERROR", "correlation_id": "undefined", "logger": "TimesheetTracker", "message": "Error parsing Excel file: read_excel() got an unexpected keyword argument 'encoding'", "context": {}}
------------------------------ Captured log call -------------------------------
ERROR    TimesheetTracker:logger.py:32 {"message": "Error parsing Excel file: read_excel() got an unexpected keyword argument 'encoding'", "timestamp": "2025-02-11T19:31:08.974299", "context": {}}
______________________ test_xls_analyzer_missing_columns _______________________

file_contents = b'PK\x03\x04\x14\x00\x00\x00\x08\x00\xe4\x9bKZF\xc7MH\x95\x00\x00\x00\xcd\x00\x00\x00\x10\x00\x00\x00docProps/app.xmlM...\x80\x01\xb9\x0f\x00\x00[Content_Types].xmlPK\x05\x06\x00\x00\x00\x00\t\x00\t\x00>\x02\x00\x00\x03\x11\x00\x00\x00\x00'

    @staticmethod
    def read_excel(file_contents: bytes) -> List[Dict[str, Any]]:
        """Read Excel file and return list of dictionaries with data."""
        try:
            # Read first sheet from Excel file
>           df = pd.read_excel(
                file_contents,
                sheet_name=0,
                dtype={
                    'Week Number': 'Int64',
                    'Month': str,
                    'Category': str,
                    'Subcategory': str,
                    'Customer': str,
                    'Project': str,
                    'Task Description': str
                },
                encoding='utf-8'
            )
E           TypeError: read_excel() got an unexpected keyword argument 'encoding'

utils/xls_analyzer.py:15: TypeError

During handling of the above exception, another exception occurred:

tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-1/test_xls_analyzer_missing_colu0')

    def test_xls_analyzer_missing_columns(tmp_path):
        """Test XLSAnalyzer with missing required columns"""
        data = {'Category': ['Test'], 'Hours': [8.0]}
        excel_file = create_test_excel(tmp_path, data)
    
        with open(excel_file, "rb") as f:
            contents = f.read()
            analyzer = XLSAnalyzer()
>           records = analyzer.read_excel(contents)

tests/test_file_upload.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

file_contents = b'PK\x03\x04\x14\x00\x00\x00\x08\x00\xe4\x9bKZF\xc7MH\x95\x00\x00\x00\xcd\x00\x00\x00\x10\x00\x00\x00docProps/app.xmlM...\x80\x01\xb9\x0f\x00\x00[Content_Types].xmlPK\x05\x06\x00\x00\x00\x00\t\x00\t\x00>\x02\x00\x00\x03\x11\x00\x00\x00\x00'

    @staticmethod
    def read_excel(file_contents: bytes) -> List[Dict[str, Any]]:
        """Read Excel file and return list of dictionaries with data."""
        try:
            # Read first sheet from Excel file
            df = pd.read_excel(
                file_contents,
                sheet_name=0,
                dtype={
                    'Week Number': 'Int64',
                    'Month': str,
                    'Category': str,
                    'Subcategory': str,
                    'Customer': str,
                    'Project': str,
                    'Task Description': str
                },
                encoding='utf-8'
            )
    
            # Drop rows where all elements are NaN
            df = df.dropna(how='all')
    
            # Convert date column to datetime
            df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
    
            # Fill NaN values with appropriate defaults
            df = df.fillna({
                'Customer': '-',
                'Project': '-',
                'Task Description': '',
                'Week Number': 0,
                'Month': '',
                'Category': 'Other',
                'Subcategory': 'Other'
            })
    
            # Convert DataFrame to list of dictionaries
            records = df.to_dict('records')
    
            logger.info(f"Successfully parsed {len(records)} records from Excel file")
            return records
    
        except Exception as e:
            logger.error(f"Error parsing Excel file: {str(e)}")
>           raise ValueError(f"Failed to parse Excel file: {str(e)}")
E           ValueError: Failed to parse Excel file: read_excel() got an unexpected keyword argument 'encoding'

utils/xls_analyzer.py:55: ValueError
----------------------------- Captured stdout call -----------------------------
{"timestamp": "2025-02-11T19:31:08.985147", "level": "ERROR", "correlation_id": "undefined", "logger": "TimesheetTracker", "message": "Error parsing Excel file: read_excel() got an unexpected keyword argument 'encoding'", "context": {}}
------------------------------ Captured log call -------------------------------
ERROR    TimesheetTracker:logger.py:32 {"message": "Error parsing Excel file: read_excel() got an unexpected keyword argument 'encoding'", "timestamp": "2025-02-11T19:31:08.985267", "context": {}}
____________________________ test_project_interface ____________________________

    def test_project_interface():
        """Test Project interface matches API response"""
        response = client.get("/projects")
>       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

tests/test_interfaces.py:55: AssertionError
----------------------------- Captured stdout call -----------------------------
{"timestamp": "2025-02-11T19:31:08.992458", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Incoming request", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "GET", "url": "http://testserver/projects", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/projects"}}
{"timestamp": "2025-02-11T19:31:08.993582", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Database session created", "context": {}}
{"timestamp": "2025-02-11T19:31:08.993987", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "ProjectRepository initialized", "context": {}}
{"timestamp": "2025-02-11T19:31:08.994169", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "ProjectService initialized with database session", "context": {}}
{"timestamp": "2025-02-11T19:31:08.994341", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Fetching projects with offset=0, limit=100", "context": {}}
{"timestamp": "2025-02-11T19:31:08.994563", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Fetching all projects with skip=0, limit=100", "context": {}}
{"timestamp": "2025-02-11T19:31:09.385585", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Retrieved 6 projects", "context": {}}
{"timestamp": "2025-02-11T19:31:09.385927", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Retrieved 6 projects", "context": {}}
{"timestamp": "2025-02-11T19:31:09.386922", "level": "ERROR", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Database session error: 6 validation errors:\n  {'type': 'string_type', 'loc': ('response', 0, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 1, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 2, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 3, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 4, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 5, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n", "context": {}}
{"timestamp": "2025-02-11T19:31:09.388468", "level": "ERROR", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Database session error details:", "context": {}, "exception": "Traceback (most recent call last):\n  File \"/home/runner/workspace/database/database.py\", line 113, in get_db\n    yield db\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/fastapi/concurrency.py\", line 27, in contextmanager_in_threadpool\n    yield await run_in_threadpool(cm.__enter__)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/fastapi/routing.py\", line 327, in app\n    content = await serialize_response(\n              ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/fastapi/routing.py\", line 176, in serialize_response\n    raise ResponseValidationError(\nfastapi.exceptions.ResponseValidationError: 6 validation errors:\n  {'type': 'string_type', 'loc': ('response', 0, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 1, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 2, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 3, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 4, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 5, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n"}
{"timestamp": "2025-02-11T19:31:09.410169", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Database session closed", "context": {}}
{"timestamp": "2025-02-11T19:31:09.412360", "level": "ERROR", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Request failed with exception", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "error_type": "ResponseValidationError", "error_message": "6 validation errors:\n  {'type': 'string_type', 'loc': ('response', 0, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 1, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 2, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 3, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 4, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 5, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n", "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/anyio/streams/memory.py\", line 111, in receive\n    return self.receive_nowait()\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/anyio/streams/memory.py\", line 106, in receive_nowait\n    raise WouldBlock\nanyio.WouldBlock\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/anyio/streams/memory.py\", line 124, in receive\n    return receiver.item\n           ^^^^^^^^^^^^^\nAttributeError: 'MemoryObjectItemReceiver' object has no attribute 'item'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/middleware/base.py\", line 157, in call_next\n    message = await recv_stream.receive()\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/anyio/streams/memory.py\", line 126, in receive\n    raise EndOfStream\nanyio.EndOfStream\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/utils/middleware.py\", line 45, in logging_middleware\n    response = await call_next(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/middleware/base.py\", line 163, in call_next\n    raise app_exc\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/middleware/base.py\", line 149, in coro\n    await self.app(scope, receive_or_disconnect, send_no_error)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/middleware/cors.py\", line 85, in __call__\n    await self.app(scope, receive, send)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/middleware/exceptions.py\", line 62, in __call__\n    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 53, in wrapped_app\n    raise exc\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 42, in wrapped_app\n    await app(scope, receive, sender)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/routing.py\", line 715, in __call__\n    await self.middleware_stack(scope, receive, send)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/routing.py\", line 735, in app\n    await route.handle(scope, receive, send)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/routing.py\", line 288, in handle\n    await self.app(scope, receive, send)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/routing.py\", line 76, in app\n    await wrap_app_handling_exceptions(app, request)(scope, receive, send)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 53, in wrapped_app\n    raise exc\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 42, in wrapped_app\n    await app(scope, receive, sender)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/routing.py\", line 73, in app\n    response = await f(request)\n               ^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/fastapi/routing.py\", line 327, in app\n    content = await serialize_response(\n              ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/fastapi/routing.py\", line 176, in serialize_response\n    raise ResponseValidationError(\nfastapi.exceptions.ResponseValidationError: 6 validation errors:\n  {'type': 'string_type', 'loc': ('response', 0, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 1, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 2, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 3, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 4, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 5, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n\n", "request_method": "GET", "request_url": "http://testserver/projects", "request_headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient"}, "client_host": "testclient", "query_params": {}, "path_params": {}, "path": "/projects", "origin": null, "cors_method": null, "cors_headers": null}}
{"timestamp": "2025-02-11T19:31:09.412925", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Adding CORS headers to response", "context": {"correlation_id": null, "method": "GET", "path": "/projects", "status_code": 500}}
------------------------------ Captured log call -------------------------------
INFO     TimesheetTracker:logger.py:29 {"message": "Incoming request", "timestamp": "2025-02-11T19:31:08.992601", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "GET", "url": "http://testserver/projects", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/projects"}}
DEBUG    TimesheetTracker:logger.py:32 {"message": "Database session created", "timestamp": "2025-02-11T19:31:08.993666", "context": {}}
DEBUG    TimesheetTracker:logger.py:32 {"message": "ProjectRepository initialized", "timestamp": "2025-02-11T19:31:08.994057", "context": {}}
DEBUG    TimesheetTracker:logger.py:32 {"message": "ProjectService initialized with database session", "timestamp": "2025-02-11T19:31:08.994226", "context": {}}
DEBUG    TimesheetTracker:logger.py:32 {"message": "Fetching projects with offset=0, limit=100", "timestamp": "2025-02-11T19:31:08.994410", "context": {}}
DEBUG    TimesheetTracker:logger.py:32 {"message": "Fetching all projects with skip=0, limit=100", "timestamp": "2025-02-11T19:31:08.994617", "context": {}}
INFO     TimesheetTracker:logger.py:32 {"message": "Retrieved 6 projects", "timestamp": "2025-02-11T19:31:09.385721", "context": {}}
INFO     TimesheetTracker:logger.py:32 {"message": "Retrieved 6 projects", "timestamp": "2025-02-11T19:31:09.386033", "context": {}}
ERROR    TimesheetTracker:logger.py:32 {"message": "Database session error: 6 validation errors:\n  {'type': 'string_type', 'loc': ('response', 0, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 1, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 2, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 3, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 4, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 5, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n", "timestamp": "2025-02-11T19:31:09.387018", "context": {}}
ERROR    TimesheetTracker:logger.py:32 {"message": "Database session error details:", "timestamp": "2025-02-11T19:31:09.389058", "context": {}}
Traceback (most recent call last):
  File "/home/runner/workspace/database/database.py", line 113, in get_db
    yield db
  File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/fastapi/concurrency.py", line 27, in contextmanager_in_threadpool
    yield await run_in_threadpool(cm.__enter__)
  File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/fastapi/routing.py", line 327, in app
    content = await serialize_response(
              ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/fastapi/routing.py", line 176, in serialize_response
    raise ResponseValidationError(
fastapi.exceptions.ResponseValidationError: 6 validation errors:
  {'type': 'string_type', 'loc': ('response', 0, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}
  {'type': 'string_type', 'loc': ('response', 1, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}
  {'type': 'string_type', 'loc': ('response', 2, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}
  {'type': 'string_type', 'loc': ('response', 3, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}
  {'type': 'string_type', 'loc': ('response', 4, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}
  {'type': 'string_type', 'loc': ('response', 5, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}

DEBUG    TimesheetTracker:logger.py:32 {"message": "Database session closed", "timestamp": "2025-02-11T19:31:09.410255", "context": {}}
ERROR    TimesheetTracker:logger.py:29 {"message": "Request failed with exception", "timestamp": "2025-02-11T19:31:09.412579", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "error_type": "ResponseValidationError", "error_message": "6 validation errors:\n  {'type': 'string_type', 'loc': ('response', 0, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 1, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 2, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 3, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 4, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 5, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n", "traceback": "Traceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/anyio/streams/memory.py\", line 111, in receive\n    return self.receive_nowait()\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/anyio/streams/memory.py\", line 106, in receive_nowait\n    raise WouldBlock\nanyio.WouldBlock\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/anyio/streams/memory.py\", line 124, in receive\n    return receiver.item\n           ^^^^^^^^^^^^^\nAttributeError: 'MemoryObjectItemReceiver' object has no attribute 'item'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/middleware/base.py\", line 157, in call_next\n    message = await recv_stream.receive()\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/anyio/streams/memory.py\", line 126, in receive\n    raise EndOfStream\nanyio.EndOfStream\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/workspace/utils/middleware.py\", line 45, in logging_middleware\n    response = await call_next(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/middleware/base.py\", line 163, in call_next\n    raise app_exc\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/middleware/base.py\", line 149, in coro\n    await self.app(scope, receive_or_disconnect, send_no_error)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/middleware/cors.py\", line 85, in __call__\n    await self.app(scope, receive, send)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/middleware/exceptions.py\", line 62, in __call__\n    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 53, in wrapped_app\n    raise exc\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 42, in wrapped_app\n    await app(scope, receive, sender)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/routing.py\", line 715, in __call__\n    await self.middleware_stack(scope, receive, send)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/routing.py\", line 735, in app\n    await route.handle(scope, receive, send)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/routing.py\", line 288, in handle\n    await self.app(scope, receive, send)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/routing.py\", line 76, in app\n    await wrap_app_handling_exceptions(app, request)(scope, receive, send)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 53, in wrapped_app\n    raise exc\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 42, in wrapped_app\n    await app(scope, receive, sender)\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/starlette/routing.py\", line 73, in app\n    response = await f(request)\n               ^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/fastapi/routing.py\", line 327, in app\n    content = await serialize_response(\n              ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/fastapi/routing.py\", line 176, in serialize_response\n    raise ResponseValidationError(\nfastapi.exceptions.ResponseValidationError: 6 validation errors:\n  {'type': 'string_type', 'loc': ('response', 0, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 1, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 2, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 3, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 4, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n  {'type': 'string_type', 'loc': ('response', 5, 'project_manager'), 'msg': 'Input should be a valid string', 'input': None}\n\n", "request_method": "GET", "request_url": "http://testserver/projects", "request_headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient"}, "client_host": "testclient", "query_params": {}, "path_params": {}, "path": "/projects", "origin": null, "cors_method": null, "cors_headers": null}}
DEBUG    TimesheetTracker:logger.py:29 {"message": "Adding CORS headers to response", "timestamp": "2025-02-11T19:31:09.412991", "context": {"correlation_id": null, "method": "GET", "path": "/projects", "status_code": 500}}
____________________________ test_model_timestamps _____________________________

db_session = <sqlalchemy.orm.session.Session object at 0x7f7e6a130fd0>

    def test_model_timestamps(db_session):
        """Test model timestamps are automatically set"""
        customer = Customer(
            name="Timestamp Test",
            contact_email="timestamp@test.com"
        )
        db_session.add(customer)
        db_session.commit()
    
        assert customer.created_at is not None
        assert customer.updated_at is None  # Should be None until updated
    
        customer.industry = "Updated Industry"
        db_session.commit()
    
        assert customer.updated_at is not None  # Should be set after update
>       assert customer.updated_at > customer.created_at
E       assert datetime.datetime(2025, 2, 11, 19, 31, 9) > datetime.datetime(2025, 2, 11, 19, 31, 9)
E        +  where datetime.datetime(2025, 2, 11, 19, 31, 9) = <models.customerModel.Customer object at 0x7f7e6a11ff50>.updated_at
E        +  and   datetime.datetime(2025, 2, 11, 19, 31, 9) = <models.customerModel.Customer object at 0x7f7e6a11ff50>.created_at

tests/test_models.py:130: AssertionError
______________________ test_time_entry_repository_create _______________________

db_session = <sqlalchemy.orm.session.Session object at 0x7f7e6a1cf110>

    def test_time_entry_repository_create(db_session):
        """Test creating a time entry through repository"""
        repo = TimeEntryRepository()
        entry = TimeEntry(
            week_number=1,
            month="January",
            category="Development",
            subcategory="Coding",
            customer="TestCustomer",
            project="TestProject",
            task_description="Test entry",
            hours=8.0,
            date=date(2024, 1, 1)
        )
    
>       result = repo.create(db_session, entry)

tests/test_repositories.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <database.timesheet_repository.TimeEntryRepository object at 0x7f7e6a1ce0d0>
db = <sqlalchemy.orm.session.Session object at 0x7f7e6a1cf110>
data = <TimeEntry(id=None, date=2024-01-01, hours=8.0, project=TestProject)>

    def create(self, db: Session, data: schemas.TimeEntryCreate) -> TimeEntry:
        """Create a new time entry from Pydantic model."""
>       entry_dict = data.model_dump(exclude={'id', 'created_at', 'updated_at'})
E       AttributeError: 'TimeEntry' object has no attribute 'model_dump'

database/timesheet_repository.py:18: AttributeError
_____________________ test_time_entry_repository_get_by_id _____________________

db_session = <sqlalchemy.orm.session.Session object at 0x7f7e6b7b5150>

    def test_time_entry_repository_get_by_id(db_session):
        """Test retrieving a time entry by ID"""
        repo = TimeEntryRepository()
        entry = TimeEntry(
            week_number=1,
            month="January",
            category="Development",
            subcategory="Coding",
            customer="TestCustomer",
            project="TestProject",
            task_description="Test entry",
            hours=8.0,
            date=date(2024, 1, 1)
        )
    
>       created = repo.create(db_session, entry)

tests/test_repositories.py:179: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <database.timesheet_repository.TimeEntryRepository object at 0x7f7e6a1cda10>
db = <sqlalchemy.orm.session.Session object at 0x7f7e6b7b5150>
data = <TimeEntry(id=None, date=2024-01-01, hours=8.0, project=TestProject)>

    def create(self, db: Session, data: schemas.TimeEntryCreate) -> TimeEntry:
        """Create a new time entry from Pydantic model."""
>       entry_dict = data.model_dump(exclude={'id', 'created_at', 'updated_at'})
E       AttributeError: 'TimeEntry' object has no attribute 'model_dump'

database/timesheet_repository.py:18: AttributeError
____________________ test_time_entry_repository_get_by_date ____________________

db_session = <sqlalchemy.orm.session.Session object at 0x7f7e69828610>

    def test_time_entry_repository_get_by_date(db_session):
        """Test retrieving time entries by date"""
        repo = TimeEntryRepository()
        entry_date = date(2024, 1, 1)
        entry = TimeEntry(
            week_number=1,
            month="January",
            category="Development",
            subcategory="Coding",
            customer="TestCustomer",
            project="TestProject",
            task_description="Test entry",
            hours=8.0,
            date=entry_date
        )
    
>       repo.create(db_session, entry)

tests/test_repositories.py:203: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <database.timesheet_repository.TimeEntryRepository object at 0x7f7e69829490>
db = <sqlalchemy.orm.session.Session object at 0x7f7e69828610>
data = <TimeEntry(id=None, date=2024-01-01, hours=8.0, project=TestProject)>

    def create(self, db: Session, data: schemas.TimeEntryCreate) -> TimeEntry:
        """Create a new time entry from Pydantic model."""
>       entry_dict = data.model_dump(exclude={'id', 'created_at', 'updated_at'})
E       AttributeError: 'TimeEntry' object has no attribute 'model_dump'

database/timesheet_repository.py:18: AttributeError
______________________ test_time_entry_repository_get_all ______________________

db_session = <sqlalchemy.orm.session.Session object at 0x7f7e6983e410>

    def test_time_entry_repository_get_all(db_session):
        """Test retrieving all time entries"""
        repo = TimeEntryRepository()
        entries = [
            TimeEntry(
                week_number=1,
                month="January",
                category="Development",
                subcategory="Coding",
                customer=f"TestCustomer{i}",
                project=f"TestProject{i}",
                task_description=f"Entry {i}",
                hours=8.0,
                date=date(2024, 1, 1)
            ) for i in range(3)
        ]
    
        for entry in entries:
>           repo.create(db_session, entry)

tests/test_repositories.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <database.timesheet_repository.TimeEntryRepository object at 0x7f7e6983f450>
db = <sqlalchemy.orm.session.Session object at 0x7f7e6983e410>
data = <TimeEntry(id=None, date=2024-01-01, hours=8.0, project=TestProject0)>

    def create(self, db: Session, data: schemas.TimeEntryCreate) -> TimeEntry:
        """Create a new time entry from Pydantic model."""
>       entry_dict = data.model_dump(exclude={'id', 'created_at', 'updated_at'})
E       AttributeError: 'TimeEntry' object has no attribute 'model_dump'

database/timesheet_repository.py:18: AttributeError
______________________ test_time_entry_repository_update _______________________

db_session = <sqlalchemy.orm.session.Session object at 0x7f7e6a1cef50>

    def test_time_entry_repository_update(db_session):
        """Test updating a time entry"""
        repo = TimeEntryRepository()
        entry = TimeEntry(
            week_number=1,
            month="January",
            category="Development",
            subcategory="Coding",
            customer="TestCustomer",
            project="TestProject",
            task_description="Original description",
            hours=8.0,
            date=date(2024, 1, 1)
        )
    
>       created = repo.create(db_session, entry)

tests/test_repositories.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <database.timesheet_repository.TimeEntryRepository object at 0x7f7e6982a710>
db = <sqlalchemy.orm.session.Session object at 0x7f7e6a1cef50>
data = <TimeEntry(id=None, date=2024-01-01, hours=8.0, project=TestProject)>

    def create(self, db: Session, data: schemas.TimeEntryCreate) -> TimeEntry:
        """Create a new time entry from Pydantic model."""
>       entry_dict = data.model_dump(exclude={'id', 'created_at', 'updated_at'})
E       AttributeError: 'TimeEntry' object has no attribute 'model_dump'

database/timesheet_repository.py:18: AttributeError
______________________ test_time_entry_repository_delete _______________________

db_session = <sqlalchemy.orm.session.Session object at 0x7f7e6ad28750>

    def test_time_entry_repository_delete(db_session):
        """Test deleting a time entry"""
        repo = TimeEntryRepository()
        entry = TimeEntry(
            week_number=1,
            month="January",
            category="Development",
            subcategory="Coding",
            customer="TestCustomer",
            project="TestProject",
            task_description="Test entry",
            hours=8.0,
            date=date(2024, 1, 1)
        )
    
>       created = repo.create(db_session, entry)

tests/test_repositories.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <database.timesheet_repository.TimeEntryRepository object at 0x7f7e6ad1d150>
db = <sqlalchemy.orm.session.Session object at 0x7f7e6ad28750>
data = <TimeEntry(id=None, date=2024-01-01, hours=8.0, project=TestProject)>

    def create(self, db: Session, data: schemas.TimeEntryCreate) -> TimeEntry:
        """Create a new time entry from Pydantic model."""
>       entry_dict = data.model_dump(exclude={'id', 'created_at', 'updated_at'})
E       AttributeError: 'TimeEntry' object has no attribute 'model_dump'

database/timesheet_repository.py:18: AttributeError
____________________ test_time_entry_repository_pagination _____________________

db_session = <sqlalchemy.orm.session.Session object at 0x7f7e69802e50>

    def test_time_entry_repository_pagination(db_session):
        """Test time entry repository pagination"""
        repo = TimeEntryRepository()
        # Create 5 time entries
        for i in range(5):
            entry = TimeEntry(
                week_number=1,
                month="January",
                category="Development",
                subcategory="Coding",
                customer=f"TestCustomer{i}",
                project=f"TestProject{i}",
                task_description=f"Entry {i}",
                hours=8.0,
                date=date(2024, 1, 1)
            )
>           repo.create(db_session, entry)

tests/test_repositories.py:299: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <database.timesheet_repository.TimeEntryRepository object at 0x7f7e69800610>
db = <sqlalchemy.orm.session.Session object at 0x7f7e69802e50>
data = <TimeEntry(id=None, date=2024-01-01, hours=8.0, project=TestProject0)>

    def create(self, db: Session, data: schemas.TimeEntryCreate) -> TimeEntry:
        """Create a new time entry from Pydantic model."""
>       entry_dict = data.model_dump(exclude={'id', 'created_at', 'updated_at'})
E       AttributeError: 'TimeEntry' object has no attribute 'model_dump'

database/timesheet_repository.py:18: AttributeError
____________________________ test_create_time_entry ____________________________

client = <starlette.testclient.TestClient object at 0x7f7e69845a90>
setup_test_data = {'customers': [<models.customerModel.Customer object at 0x7f7e69847690>, <models.customerModel.Customer object at 0x7f...project_id=Unassigned, name=Unassigned)>, <Project(id=2, project_id=Project_Magic_Bullet, name=Project Magic Bullet)>]}

    def test_create_time_entry(client, setup_test_data):
        """Test creating a single time entry"""
        entry_data = {
            "week_number": 41,
            "month": "October",
            "category": "Other",
            "subcategory": "Other Training",
            "customer": "ECOLAB",
            "project": "Project_Magic_Bullet",
            "task_description": "Test task",
            "hours": 8.0,
            "date": "2024-10-07"
        }
        response = client.post("/time-entries/", json=entry_data)
>       assert response.status_code == 201
E       assert 200 == 201
E        +  where 200 = <Response [200 OK]>.status_code

tests/test_routes.py:38: AssertionError
----------------------------- Captured stdout call -----------------------------
{"timestamp": "2025-02-11T19:31:09.984686", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Incoming request", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "202", "content-type": "application/json"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/"}}
{"timestamp": "2025-02-11T19:31:09.985252", "level": "WARNING", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Request failed with status 307", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 307, "method": "POST", "url": "http://testserver/time-entries/", "process_time_ms": "0.77", "response_headers": {"content-length": "0", "location": "http://testserver/time-entries"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/", "origin": null, "cors_method": null, "cors_headers": null}}
{"timestamp": "2025-02-11T19:31:09.985734", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Adding CORS headers to response", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries/", "status_code": 307}}
{"timestamp": "2025-02-11T19:31:09.986968", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Incoming request", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "202", "content-type": "application/json"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries"}}
{"timestamp": "2025-02-11T19:31:09.991250", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "TimesheetService initialized", "context": {}}
{"timestamp": "2025-02-11T19:31:10.011108", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Request completed successfully", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 200, "process_time_ms": "24.17", "response_headers": {"content-length": "262", "content-type": "application/json"}, "content_type": "application/json", "method": "POST", "path": "/time-entries"}}
{"timestamp": "2025-02-11T19:31:10.011545", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Adding CORS headers to response", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries", "status_code": 200}}
------------------------------ Captured log call -------------------------------
INFO     TimesheetTracker:logger.py:29 {"message": "Incoming request", "timestamp": "2025-02-11T19:31:09.984818", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "202", "content-type": "application/json"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/"}}
WARNING  TimesheetTracker:logger.py:29 {"message": "Request failed with status 307", "timestamp": "2025-02-11T19:31:09.985333", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 307, "method": "POST", "url": "http://testserver/time-entries/", "process_time_ms": "0.77", "response_headers": {"content-length": "0", "location": "http://testserver/time-entries"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/", "origin": null, "cors_method": null, "cors_headers": null}}
DEBUG    TimesheetTracker:logger.py:29 {"message": "Adding CORS headers to response", "timestamp": "2025-02-11T19:31:09.985796", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries/", "status_code": 307}}
INFO     TimesheetTracker:logger.py:29 {"message": "Incoming request", "timestamp": "2025-02-11T19:31:09.987103", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "202", "content-type": "application/json"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries"}}
DEBUG    TimesheetTracker:logger.py:32 {"message": "TimesheetService initialized", "timestamp": "2025-02-11T19:31:09.991333", "context": {}}
INFO     TimesheetTracker:logger.py:29 {"message": "Request completed successfully", "timestamp": "2025-02-11T19:31:10.011221", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 200, "process_time_ms": "24.17", "response_headers": {"content-length": "262", "content-type": "application/json"}, "content_type": "application/json", "method": "POST", "path": "/time-entries"}}
DEBUG    TimesheetTracker:logger.py:29 {"message": "Adding CORS headers to response", "timestamp": "2025-02-11T19:31:10.011620", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries", "status_code": 200}}
__________________ test_get_time_entries_with_database_query ___________________

client = <starlette.testclient.TestClient object at 0x7f7e69847250>
setup_test_data = {'customers': [<models.customerModel.Customer object at 0x7f7e69806c10>, <models.customerModel.Customer object at 0x7f...project_id=Unassigned, name=Unassigned)>, <Project(id=2, project_id=Project_Magic_Bullet, name=Project Magic Bullet)>]}

    def test_get_time_entries_with_database_query(client, setup_test_data):
        """Test getting time entries with database query verification"""
        # Create multiple test entries first
        entries = [
            {
                "week_number": 41,
                "month": "October",
                "category": "Development",
                "subcategory": "Coding",
                "customer": "ECOLAB",
                "project": "Project_Magic_Bullet",
                "task_description": "Task 1",
                "hours": 8.0,
                "date": "2024-10-07"
            },
            {
                "week_number": 41,
                "month": "October",
                "category": "Development",
                "subcategory": "Testing",
                "customer": "ECOLAB",
                "project": "Project_Magic_Bullet",
                "task_description": "Task 2",
                "hours": 4.0,
                "date": "2024-10-07"
            }
        ]
    
        # Add entries to database
        for entry in entries:
            response = client.post("/time-entries/", json=entry)
>           assert response.status_code == 201
E           assert 200 == 201
E            +  where 200 = <Response [200 OK]>.status_code

tests/test_routes.py:75: AssertionError
----------------------------- Captured stdout call -----------------------------
{"timestamp": "2025-02-11T19:31:10.066244", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Incoming request", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "197", "content-type": "application/json"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/"}}
{"timestamp": "2025-02-11T19:31:10.066929", "level": "WARNING", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Request failed with status 307", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 307, "method": "POST", "url": "http://testserver/time-entries/", "process_time_ms": "0.69", "response_headers": {"content-length": "0", "location": "http://testserver/time-entries"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/", "origin": null, "cors_method": null, "cors_headers": null}}
{"timestamp": "2025-02-11T19:31:10.067314", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Adding CORS headers to response", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries/", "status_code": 307}}
{"timestamp": "2025-02-11T19:31:10.068683", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Incoming request", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "197", "content-type": "application/json"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries"}}
{"timestamp": "2025-02-11T19:31:10.070286", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "TimesheetService initialized", "context": {}}
{"timestamp": "2025-02-11T19:31:10.093184", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Request completed successfully", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 200, "process_time_ms": "24.56", "response_headers": {"content-length": "257", "content-type": "application/json"}, "content_type": "application/json", "method": "POST", "path": "/time-entries"}}
{"timestamp": "2025-02-11T19:31:10.093553", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Adding CORS headers to response", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries", "status_code": 200}}
------------------------------ Captured log call -------------------------------
INFO     TimesheetTracker:logger.py:29 {"message": "Incoming request", "timestamp": "2025-02-11T19:31:10.066369", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "197", "content-type": "application/json"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/"}}
WARNING  TimesheetTracker:logger.py:29 {"message": "Request failed with status 307", "timestamp": "2025-02-11T19:31:10.067051", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 307, "method": "POST", "url": "http://testserver/time-entries/", "process_time_ms": "0.69", "response_headers": {"content-length": "0", "location": "http://testserver/time-entries"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/", "origin": null, "cors_method": null, "cors_headers": null}}
DEBUG    TimesheetTracker:logger.py:29 {"message": "Adding CORS headers to response", "timestamp": "2025-02-11T19:31:10.067409", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries/", "status_code": 307}}
INFO     TimesheetTracker:logger.py:29 {"message": "Incoming request", "timestamp": "2025-02-11T19:31:10.068859", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "197", "content-type": "application/json"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries"}}
DEBUG    TimesheetTracker:logger.py:32 {"message": "TimesheetService initialized", "timestamp": "2025-02-11T19:31:10.070380", "context": {}}
INFO     TimesheetTracker:logger.py:29 {"message": "Request completed successfully", "timestamp": "2025-02-11T19:31:10.093273", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 200, "process_time_ms": "24.56", "response_headers": {"content-length": "257", "content-type": "application/json"}, "content_type": "application/json", "method": "POST", "path": "/time-entries"}}
DEBUG    TimesheetTracker:logger.py:29 {"message": "Adding CORS headers to response", "timestamp": "2025-02-11T19:31:10.093615", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries", "status_code": 200}}
___________________ test_get_time_entries_complex_filtering ____________________

client = <starlette.testclient.TestClient object at 0x7f7e69859490>
setup_test_data = {'customers': [<models.customerModel.Customer object at 0x7f7e69859ed0>, <models.customerModel.Customer object at 0x7f...project_id=Unassigned, name=Unassigned)>, <Project(id=2, project_id=Project_Magic_Bullet, name=Project Magic Bullet)>]}

    def test_get_time_entries_complex_filtering(client, setup_test_data):
        """Test time entries with multiple filter combinations"""
        # Create test entries with different combinations
        entries = [
            {
                "week_number": 41,
                "month": "October",
                "category": "Development",
                "subcategory": "Coding",
                "customer": "ECOLAB",
                "project": "Project_Magic_Bullet",
                "task_description": "Dev Task",
                "hours": 8.0,
                "date": "2024-10-07"
            },
            {
                "week_number": 41,
                "month": "October",
                "category": "QA",
                "subcategory": "Testing",
                "customer": "ECOLAB",
                "project": "Project_Magic_Bullet",
                "task_description": "QA Task",
                "hours": 4.0,
                "date": "2024-10-07"
            }
        ]
    
        for entry in entries:
            response = client.post("/time-entries/", json=entry)
>           assert response.status_code == 201
E           assert 200 == 201
E            +  where 200 = <Response [200 OK]>.status_code

tests/test_routes.py:118: AssertionError
----------------------------- Captured stdout call -----------------------------
{"timestamp": "2025-02-11T19:31:10.152145", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Incoming request", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "199", "content-type": "application/json"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/"}}
{"timestamp": "2025-02-11T19:31:10.152699", "level": "WARNING", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Request failed with status 307", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 307, "method": "POST", "url": "http://testserver/time-entries/", "process_time_ms": "0.68", "response_headers": {"content-length": "0", "location": "http://testserver/time-entries"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/", "origin": null, "cors_method": null, "cors_headers": null}}
{"timestamp": "2025-02-11T19:31:10.153014", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Adding CORS headers to response", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries/", "status_code": 307}}
{"timestamp": "2025-02-11T19:31:10.154121", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Incoming request", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "199", "content-type": "application/json"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries"}}
{"timestamp": "2025-02-11T19:31:10.155397", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "TimesheetService initialized", "context": {}}
{"timestamp": "2025-02-11T19:31:10.200630", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Request completed successfully", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 200, "process_time_ms": "46.46", "response_headers": {"content-length": "259", "content-type": "application/json"}, "content_type": "application/json", "method": "POST", "path": "/time-entries"}}
{"timestamp": "2025-02-11T19:31:10.201022", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Adding CORS headers to response", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries", "status_code": 200}}
------------------------------ Captured log call -------------------------------
INFO     TimesheetTracker:logger.py:29 {"message": "Incoming request", "timestamp": "2025-02-11T19:31:10.152276", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "199", "content-type": "application/json"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/"}}
WARNING  TimesheetTracker:logger.py:29 {"message": "Request failed with status 307", "timestamp": "2025-02-11T19:31:10.152788", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 307, "method": "POST", "url": "http://testserver/time-entries/", "process_time_ms": "0.68", "response_headers": {"content-length": "0", "location": "http://testserver/time-entries"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/", "origin": null, "cors_method": null, "cors_headers": null}}
DEBUG    TimesheetTracker:logger.py:29 {"message": "Adding CORS headers to response", "timestamp": "2025-02-11T19:31:10.153100", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries/", "status_code": 307}}
INFO     TimesheetTracker:logger.py:29 {"message": "Incoming request", "timestamp": "2025-02-11T19:31:10.154225", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "199", "content-type": "application/json"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries"}}
DEBUG    TimesheetTracker:logger.py:32 {"message": "TimesheetService initialized", "timestamp": "2025-02-11T19:31:10.155455", "context": {}}
INFO     TimesheetTracker:logger.py:29 {"message": "Request completed successfully", "timestamp": "2025-02-11T19:31:10.200744", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 200, "process_time_ms": "46.46", "response_headers": {"content-length": "259", "content-type": "application/json"}, "content_type": "application/json", "method": "POST", "path": "/time-entries"}}
DEBUG    TimesheetTracker:logger.py:29 {"message": "Adding CORS headers to response", "timestamp": "2025-02-11T19:31:10.201143", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries", "status_code": 200}}
___________________________ test_upload_excel_valid ____________________________

client = <starlette.testclient.TestClient object at 0x7f7e6adebb50>
setup_test_data = {'customers': [<models.customerModel.Customer object at 0x7f7e69859dd0>, <models.customerModel.Customer object at 0x7f...project_id=Unassigned, name=Unassigned)>, <Project(id=2, project_id=Project_Magic_Bullet, name=Project Magic Bullet)>]}
tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-1/test_upload_excel_valid1')

    def test_upload_excel_valid(client, setup_test_data, tmp_path):
        """Test uploading a valid Excel file"""
        import pandas as pd
    
        # Create test Excel file
        excel_data = {
            'Week Number': [41, 41],
            'Month': ['October', 'October'],
            'Category': ['Other', 'Other'],
            'Subcategory': ['Other Training', 'Other Training'],
            'Customer': ['ECOLAB', 'ECOLAB'],
            'Project': ['Project_Magic_Bullet', 'Project_Magic_Bullet'],
            'Task Description': ['Test task', 'Another task'],
            'Hours': [8.0, 4.0],
            'Date': ['2024-10-07', '2024-10-07']
        }
        df = pd.DataFrame(excel_data)
        excel_file = tmp_path / "test.xlsx"
        df.to_excel(excel_file, index=False)
    
        with open(excel_file, "rb") as f:
            response = client.post(
                "/time-entries/upload/",
                files={"file": ("test.xlsx", f, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")}
            )
    
>       assert response.status_code == 201
E       assert 400 == 201
E        +  where 400 = <Response [400 Bad Request]>.status_code

tests/test_routes.py:196: AssertionError
----------------------------- Captured stdout call -----------------------------
{"timestamp": "2025-02-11T19:31:10.260878", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Incoming request", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries/upload/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "5381", "content-type": "multipart/form-data; boundary=9a777d121e66ba4e8b1bc6e8613613f6"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/upload/"}}
{"timestamp": "2025-02-11T19:31:10.263050", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Processing timesheet upload: test.xlsx", "context": {}}
{"timestamp": "2025-02-11T19:31:10.263302", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "TimesheetService initialized", "context": {}}
{"timestamp": "2025-02-11T19:31:10.263537", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Processing timesheet upload: test.xlsx", "context": {}}
{"timestamp": "2025-02-11T19:31:10.263769", "level": "ERROR", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Error parsing Excel file: read_excel() got an unexpected keyword argument 'encoding'", "context": {}}
{"timestamp": "2025-02-11T19:31:10.263964", "level": "ERROR", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Error importing Excel data: Failed to parse Excel file: read_excel() got an unexpected keyword argument 'encoding'", "context": {}}
{"timestamp": "2025-02-11T19:31:10.264149", "level": "ERROR", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Error processing timesheet: Failed to parse Excel file: read_excel() got an unexpected keyword argument 'encoding'", "context": {}}
{"timestamp": "2025-02-11T19:31:10.264350", "level": "ERROR", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Error processing timesheet: 400: Failed to parse Excel file: read_excel() got an unexpected keyword argument 'encoding'", "context": {}}
{"timestamp": "2025-02-11T19:31:10.264872", "level": "WARNING", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Request failed with status 400", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 400, "method": "POST", "url": "http://testserver/time-entries/upload/", "process_time_ms": "4.12", "response_headers": {"content-length": "99", "content-type": "application/json"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/upload/", "origin": null, "cors_method": null, "cors_headers": null}}
{"timestamp": "2025-02-11T19:31:10.265241", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Adding CORS headers to response", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries/upload/", "status_code": 400}}
------------------------------ Captured log call -------------------------------
INFO     TimesheetTracker:logger.py:29 {"message": "Incoming request", "timestamp": "2025-02-11T19:31:10.261121", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries/upload/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "5381", "content-type": "multipart/form-data; boundary=9a777d121e66ba4e8b1bc6e8613613f6"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/upload/"}}
INFO     TimesheetTracker:logger.py:32 {"message": "Processing timesheet upload: test.xlsx", "timestamp": "2025-02-11T19:31:10.263145", "context": {}}
DEBUG    TimesheetTracker:logger.py:32 {"message": "TimesheetService initialized", "timestamp": "2025-02-11T19:31:10.263371", "context": {}}
INFO     TimesheetTracker:logger.py:32 {"message": "Processing timesheet upload: test.xlsx", "timestamp": "2025-02-11T19:31:10.263623", "context": {}}
ERROR    TimesheetTracker:logger.py:32 {"message": "Error parsing Excel file: read_excel() got an unexpected keyword argument 'encoding'", "timestamp": "2025-02-11T19:31:10.263842", "context": {}}
ERROR    TimesheetTracker:logger.py:32 {"message": "Error importing Excel data: Failed to parse Excel file: read_excel() got an unexpected keyword argument 'encoding'", "timestamp": "2025-02-11T19:31:10.264039", "context": {}}
ERROR    TimesheetTracker:logger.py:32 {"message": "Error processing timesheet: Failed to parse Excel file: read_excel() got an unexpected keyword argument 'encoding'", "timestamp": "2025-02-11T19:31:10.264216", "context": {}}
ERROR    TimesheetTracker:logger.py:32 {"message": "Error processing timesheet: 400: Failed to parse Excel file: read_excel() got an unexpected keyword argument 'encoding'", "timestamp": "2025-02-11T19:31:10.264435", "context": {}}
WARNING  TimesheetTracker:logger.py:29 {"message": "Request failed with status 400", "timestamp": "2025-02-11T19:31:10.264971", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 400, "method": "POST", "url": "http://testserver/time-entries/upload/", "process_time_ms": "4.12", "response_headers": {"content-length": "99", "content-type": "application/json"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/upload/", "origin": null, "cors_method": null, "cors_headers": null}}
DEBUG    TimesheetTracker:logger.py:29 {"message": "Adding CORS headers to response", "timestamp": "2025-02-11T19:31:10.265320", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries/upload/", "status_code": 400}}
____________________________ test_upload_csv_valid _____________________________

client = <starlette.testclient.TestClient object at 0x7f7e6adf1750>
setup_test_data = {'customers': [<models.customerModel.Customer object at 0x7f7e6adf0ad0>, <models.customerModel.Customer object at 0x7f...project_id=Unassigned, name=Unassigned)>, <Project(id=2, project_id=Project_Magic_Bullet, name=Project Magic Bullet)>]}
tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-1/test_upload_csv_valid0')

    def test_upload_csv_valid(client, setup_test_data, tmp_path):
        """Test uploading a valid CSV file"""
        csv_content = """Week Number,Month,Category,Subcategory,Customer,Project,Task Description,Hours,Date
    41,October,Other,Other Training,ECOLAB,Project_Magic_Bullet,Test task,8.0,2024-10-07
    41,October,Other,Other Training,ECOLAB,Project_Magic_Bullet,Another task,4.0,2024-10-07"""
    
        csv_file = tmp_path / "test.csv"
        csv_file.write_text(csv_content)
    
        with open(csv_file, "rb") as f:
            response = client.post(
                "/time-entries/upload/",
                files={"file": ("test.csv", f, "text/csv")}
            )
    
>       assert response.status_code == 201
E       assert 400 == 201
E        +  where 400 = <Response [400 Bad Request]>.status_code

tests/test_routes.py:216: AssertionError
----------------------------- Captured stdout call -----------------------------
{"timestamp": "2025-02-11T19:31:10.322454", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Incoming request", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries/upload/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "424", "content-type": "multipart/form-data; boundary=2602f2062d39a492869b3469369716ce"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/upload/"}}
{"timestamp": "2025-02-11T19:31:10.323996", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Processing timesheet upload: test.csv", "context": {}}
{"timestamp": "2025-02-11T19:31:10.324479", "level": "WARNING", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Request failed with status 400", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 400, "method": "POST", "url": "http://testserver/time-entries/upload/", "process_time_ms": "2.11", "response_headers": {"content-length": "51", "content-type": "application/json"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/upload/", "origin": null, "cors_method": null, "cors_headers": null}}
{"timestamp": "2025-02-11T19:31:10.324831", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Adding CORS headers to response", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries/upload/", "status_code": 400}}
------------------------------ Captured log call -------------------------------
INFO     TimesheetTracker:logger.py:29 {"message": "Incoming request", "timestamp": "2025-02-11T19:31:10.322585", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries/upload/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "424", "content-type": "multipart/form-data; boundary=2602f2062d39a492869b3469369716ce"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/upload/"}}
INFO     TimesheetTracker:logger.py:32 {"message": "Processing timesheet upload: test.csv", "timestamp": "2025-02-11T19:31:10.324064", "context": {}}
WARNING  TimesheetTracker:logger.py:29 {"message": "Request failed with status 400", "timestamp": "2025-02-11T19:31:10.324591", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 400, "method": "POST", "url": "http://testserver/time-entries/upload/", "process_time_ms": "2.11", "response_headers": {"content-length": "51", "content-type": "application/json"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/upload/", "origin": null, "cors_method": null, "cors_headers": null}}
DEBUG    TimesheetTracker:logger.py:29 {"message": "Adding CORS headers to response", "timestamp": "2025-02-11T19:31:10.324896", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries/upload/", "status_code": 400}}
________________________ test_upload_csv_invalid_format ________________________

client = <starlette.testclient.TestClient object at 0x7f7e6a19e650>

    def test_upload_csv_invalid_format(client):
        """Test uploading CSV with invalid format"""
        # Create CSV with missing required columns
        csv_content = "Category,Hours\nOther,8.0"
        csv_file = io.StringIO(csv_content)
    
>       response = client.post(
            "/time-entries/upload/",
            files={"file": ("test.csv", csv_file, "text/csv")}
        )

tests/test_routes.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.pythonlibs/lib/python3.11/site-packages/starlette/testclient.py:593: in post
    return super().post(
.pythonlibs/lib/python3.11/site-packages/httpx/_client.py:1144: in post
    return self.request(
.pythonlibs/lib/python3.11/site-packages/starlette/testclient.py:484: in request
    return super().request(
.pythonlibs/lib/python3.11/site-packages/httpx/_client.py:812: in request
    request = self.build_request(
.pythonlibs/lib/python3.11/site-packages/httpx/_client.py:378: in build_request
    return Request(
.pythonlibs/lib/python3.11/site-packages/httpx/_models.py:408: in __init__
    headers, stream = encode_request(
.pythonlibs/lib/python3.11/site-packages/httpx/_content.py:212: in encode_request
    return encode_multipart_data(data or {}, files, boundary)
.pythonlibs/lib/python3.11/site-packages/httpx/_content.py:155: in encode_multipart_data
    multipart = MultipartStream(data=data, files=files, boundary=boundary)
.pythonlibs/lib/python3.11/site-packages/httpx/_multipart.py:242: in __init__
    self.fields = list(self._iter_fields(data, files))
.pythonlibs/lib/python3.11/site-packages/httpx/_multipart.py:256: in _iter_fields
    yield FileField(name=name, value=value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <httpx._multipart.FileField object at 0x7f7e6986b690>, name = 'file'
value = ('test.csv', <_io.StringIO object at 0x7f7e6a1e0ee0>, 'text/csv')

    def __init__(self, name: str, value: FileTypes) -> None:
        self.name = name
    
        fileobj: FileContent
    
        headers: dict[str, str] = {}
        content_type: str | None = None
    
        # This large tuple based API largely mirror's requests' API
        # It would be good to think of better APIs for this that we could
        # include in httpx 2.0 since variable length tuples(especially of 4 elements)
        # are quite unwieldly
        if isinstance(value, tuple):
            if len(value) == 2:
                # neither the 3rd parameter (content_type) nor the 4th (headers)
                # was included
                filename, fileobj = value
            elif len(value) == 3:
                filename, fileobj, content_type = value
            else:
                # all 4 parameters included
                filename, fileobj, content_type, headers = value  # type: ignore
        else:
            filename = Path(str(getattr(value, "name", "upload"))).name
            fileobj = value
    
        if content_type is None:
            content_type = _guess_content_type(filename)
    
        has_content_type_header = any("content-type" in key.lower() for key in headers)
        if content_type is not None and not has_content_type_header:
            # note that unlike requests, we ignore the content_type provided in the 3rd
            # tuple element if it is also included in the headers requests does
            # the opposite (it overwrites the headerwith the 3rd tuple element)
            headers["Content-Type"] = content_type
    
        if isinstance(fileobj, io.StringIO):
>           raise TypeError(
                "Multipart file uploads require 'io.BytesIO', not 'io.StringIO'."
            )
E           TypeError: Multipart file uploads require 'io.BytesIO', not 'io.StringIO'.

.pythonlibs/lib/python3.11/site-packages/httpx/_multipart.py:159: TypeError
____________________ test_upload_csv_with_validation_errors ____________________

client = <starlette.testclient.TestClient object at 0x7f7e696519d0>
setup_test_data = {'customers': [<models.customerModel.Customer object at 0x7f7e69652750>, <models.customerModel.Customer object at 0x7f...project_id=Unassigned, name=Unassigned)>, <Project(id=2, project_id=Project_Magic_Bullet, name=Project Magic Bullet)>]}
tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-1/test_upload_csv_with_validatio0')

    def test_upload_csv_with_validation_errors(client, setup_test_data, tmp_path):
        """Test uploading CSV with entries that will produce validation warnings"""
        csv_content = """Week Number,Month,Category,Subcategory,Customer,Project,Task Description,Hours,Date
    41,October,Other,Other Training,NonExistent,NonExistent,Test task,8.0,2024-10-07"""
    
        csv_file = tmp_path / "test.csv"
        csv_file.write_text(csv_content)
    
        with open(csv_file, "rb") as f:
            response = client.post(
                "/time-entries/upload/",
                files={"file": ("test.csv", f, "text/csv")}
            )
    
>       assert response.status_code == 201
E       assert 400 == 201
E        +  where 400 = <Response [400 Bad Request]>.status_code

tests/test_routes.py:249: AssertionError
----------------------------- Captured stdout call -----------------------------
{"timestamp": "2025-02-11T19:31:10.472280", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Incoming request", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries/upload/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "332", "content-type": "multipart/form-data; boundary=9e5cb7626d64b4881cd1cd5fd8ac54f9"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/upload/"}}
{"timestamp": "2025-02-11T19:31:10.473896", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Processing timesheet upload: test.csv", "context": {}}
{"timestamp": "2025-02-11T19:31:10.474361", "level": "WARNING", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Request failed with status 400", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 400, "method": "POST", "url": "http://testserver/time-entries/upload/", "process_time_ms": "2.20", "response_headers": {"content-length": "51", "content-type": "application/json"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/upload/", "origin": null, "cors_method": null, "cors_headers": null}}
{"timestamp": "2025-02-11T19:31:10.474734", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Adding CORS headers to response", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries/upload/", "status_code": 400}}
------------------------------ Captured log call -------------------------------
INFO     TimesheetTracker:logger.py:29 {"message": "Incoming request", "timestamp": "2025-02-11T19:31:10.472417", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries/upload/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "332", "content-type": "multipart/form-data; boundary=9e5cb7626d64b4881cd1cd5fd8ac54f9"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/upload/"}}
INFO     TimesheetTracker:logger.py:32 {"message": "Processing timesheet upload: test.csv", "timestamp": "2025-02-11T19:31:10.473958", "context": {}}
WARNING  TimesheetTracker:logger.py:29 {"message": "Request failed with status 400", "timestamp": "2025-02-11T19:31:10.474453", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 400, "method": "POST", "url": "http://testserver/time-entries/upload/", "process_time_ms": "2.20", "response_headers": {"content-length": "51", "content-type": "application/json"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/upload/", "origin": null, "cors_method": null, "cors_headers": null}}
DEBUG    TimesheetTracker:logger.py:29 {"message": "Adding CORS headers to response", "timestamp": "2025-02-11T19:31:10.474793", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries/upload/", "status_code": 400}}
__________________ test_upload_csv_with_foreign_key_violation __________________

client = <starlette.testclient.TestClient object at 0x7f7e6a1d8450>
setup_test_data = {'customers': [<models.customerModel.Customer object at 0x7f7e6a1d9250>, <models.customerModel.Customer object at 0x7f...project_id=Unassigned, name=Unassigned)>, <Project(id=2, project_id=Project_Magic_Bullet, name=Project Magic Bullet)>]}
tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-1/test_upload_csv_with_foreign_k0')

    def test_upload_csv_with_foreign_key_violation(client, setup_test_data, tmp_path):
        """Test handling of foreign key violations during CSV upload"""
        csv_content = """Week Number,Month,Category,Subcategory,Customer,Project,Task Description,Hours,Date
    41,October,Other,Other Training,Project Magic Bullet,NonExistent,Test task,8.0,2024-10-07"""
    
        csv_file = tmp_path / "test.csv"
        csv_file.write_text(csv_content)
    
        with open(csv_file, "rb") as f:
            response = client.post(
                "/time-entries/upload/",
                files={"file": ("test.csv", f, "text/csv")}
            )
    
>       assert response.status_code == 201  # Should succeed with validation warnings
E       assert 400 == 201
E        +  where 400 = <Response [400 Bad Request]>.status_code

tests/test_routes.py:269: AssertionError
----------------------------- Captured stdout call -----------------------------
{"timestamp": "2025-02-11T19:31:10.528841", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Incoming request", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries/upload/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "341", "content-type": "multipart/form-data; boundary=16625b0e2dff313ac3384ab6938608fb"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/upload/"}}
{"timestamp": "2025-02-11T19:31:10.530469", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Processing timesheet upload: test.csv", "context": {}}
{"timestamp": "2025-02-11T19:31:10.530981", "level": "WARNING", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Request failed with status 400", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 400, "method": "POST", "url": "http://testserver/time-entries/upload/", "process_time_ms": "2.22", "response_headers": {"content-length": "51", "content-type": "application/json"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/upload/", "origin": null, "cors_method": null, "cors_headers": null}}
{"timestamp": "2025-02-11T19:31:10.531302", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Adding CORS headers to response", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries/upload/", "status_code": 400}}
------------------------------ Captured log call -------------------------------
INFO     TimesheetTracker:logger.py:29 {"message": "Incoming request", "timestamp": "2025-02-11T19:31:10.528957", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries/upload/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "341", "content-type": "multipart/form-data; boundary=16625b0e2dff313ac3384ab6938608fb"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/upload/"}}
INFO     TimesheetTracker:logger.py:32 {"message": "Processing timesheet upload: test.csv", "timestamp": "2025-02-11T19:31:10.530569", "context": {}}
WARNING  TimesheetTracker:logger.py:29 {"message": "Request failed with status 400", "timestamp": "2025-02-11T19:31:10.531056", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 400, "method": "POST", "url": "http://testserver/time-entries/upload/", "process_time_ms": "2.22", "response_headers": {"content-length": "51", "content-type": "application/json"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/upload/", "origin": null, "cors_method": null, "cors_headers": null}}
DEBUG    TimesheetTracker:logger.py:29 {"message": "Adding CORS headers to response", "timestamp": "2025-02-11T19:31:10.531360", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries/upload/", "status_code": 400}}
_______________ test_upload_csv_with_mismatched_customer_project _______________

client = <starlette.testclient.TestClient object at 0x7f7e6ad364d0>
setup_test_data = {'customers': [<models.customerModel.Customer object at 0x7f7e6ad35810>, <models.customerModel.Customer object at 0x7f...project_id=Unassigned, name=Unassigned)>, <Project(id=2, project_id=Project_Magic_Bullet, name=Project Magic Bullet)>]}
tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-1/test_upload_csv_with_mismatche0')

    def test_upload_csv_with_mismatched_customer_project(client, setup_test_data, tmp_path):
        """Test uploading CSV with mismatched customer-project relationships"""
        csv_content = """Week Number,Month,Category,Subcategory,Customer,Project,Task Description,Hours,Date
    41,October,Other,Other Training,ECOLAB,NonExistent_Project,Test task,8.0,2024-10-07"""
    
        csv_file = tmp_path / "test.csv"
        csv_file.write_text(csv_content)
    
        with open(csv_file, "rb") as f:
            response = client.post(
                "/time-entries/upload/",
                files={"file": ("test.csv", f, "text/csv")}
            )
    
>       assert response.status_code == 201
E       assert 400 == 201
E        +  where 400 = <Response [400 Bad Request]>.status_code

tests/test_routes.py:296: AssertionError
----------------------------- Captured stdout call -----------------------------
{"timestamp": "2025-02-11T19:31:10.589724", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Incoming request", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries/upload/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "335", "content-type": "multipart/form-data; boundary=645eec61c9fcaca1e4048f4b464ff2d9"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/upload/"}}
{"timestamp": "2025-02-11T19:31:10.591184", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Processing timesheet upload: test.csv", "context": {}}
{"timestamp": "2025-02-11T19:31:10.591721", "level": "WARNING", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Request failed with status 400", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 400, "method": "POST", "url": "http://testserver/time-entries/upload/", "process_time_ms": "2.07", "response_headers": {"content-length": "51", "content-type": "application/json"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/upload/", "origin": null, "cors_method": null, "cors_headers": null}}
{"timestamp": "2025-02-11T19:31:10.592036", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Adding CORS headers to response", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries/upload/", "status_code": 400}}
------------------------------ Captured log call -------------------------------
INFO     TimesheetTracker:logger.py:29 {"message": "Incoming request", "timestamp": "2025-02-11T19:31:10.589819", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries/upload/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "335", "content-type": "multipart/form-data; boundary=645eec61c9fcaca1e4048f4b464ff2d9"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/upload/"}}
INFO     TimesheetTracker:logger.py:32 {"message": "Processing timesheet upload: test.csv", "timestamp": "2025-02-11T19:31:10.591262", "context": {}}
WARNING  TimesheetTracker:logger.py:29 {"message": "Request failed with status 400", "timestamp": "2025-02-11T19:31:10.591799", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 400, "method": "POST", "url": "http://testserver/time-entries/upload/", "process_time_ms": "2.07", "response_headers": {"content-length": "51", "content-type": "application/json"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/upload/", "origin": null, "cors_method": null, "cors_headers": null}}
DEBUG    TimesheetTracker:logger.py:29 {"message": "Adding CORS headers to response", "timestamp": "2025-02-11T19:31:10.592092", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries/upload/", "status_code": 400}}
_______________ test_upload_csv_with_multiple_validation_errors ________________

client = <starlette.testclient.TestClient object at 0x7f7e6ad349d0>
setup_test_data = {'customers': [<models.customerModel.Customer object at 0x7f7e6983ab90>, <models.customerModel.Customer object at 0x7f...project_id=Unassigned, name=Unassigned)>, <Project(id=2, project_id=Project_Magic_Bullet, name=Project Magic Bullet)>]}
tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-1/test_upload_csv_with_multiple_0')

    def test_upload_csv_with_multiple_validation_errors(client, setup_test_data, tmp_path):
        """Test uploading CSV with multiple types of validation errors"""
        csv_content = """Week Number,Month,Category,Subcategory,Customer,Project,Task Description,Hours,Date
    41,October,Other,Other Training,Invalid1,Project1,Task 1,8.0,2024-10-07
    41,October,Other,Other Training,ECOLAB,Invalid2,Task 2,8.0,2024-10-07
    41,October,Other,Other Training,Invalid3,Project3,Task 3,25.0,2024-10-07"""
    
        csv_file = tmp_path / "test.csv"
        csv_file.write_text(csv_content)
    
        with open(csv_file, "rb") as f:
            response = client.post(
                "/time-entries/upload/",
                files={"file": ("test.csv", f, "text/csv")}
            )
    
>       assert response.status_code == 201
E       assert 400 == 201
E        +  where 400 = <Response [400 Bad Request]>.status_code

tests/test_routes.py:324: AssertionError
----------------------------- Captured stdout call -----------------------------
{"timestamp": "2025-02-11T19:31:10.665941", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Incoming request", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries/upload/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "466", "content-type": "multipart/form-data; boundary=ea208d2a7d7667f2fe939bba7e9f10b5"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/upload/"}}
{"timestamp": "2025-02-11T19:31:10.667991", "level": "INFO", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Processing timesheet upload: test.csv", "context": {}}
{"timestamp": "2025-02-11T19:31:10.668630", "level": "WARNING", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Request failed with status 400", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 400, "method": "POST", "url": "http://testserver/time-entries/upload/", "process_time_ms": "2.85", "response_headers": {"content-length": "51", "content-type": "application/json"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/upload/", "origin": null, "cors_method": null, "cors_headers": null}}
{"timestamp": "2025-02-11T19:31:10.669120", "level": "DEBUG", "correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "logger": "TimesheetTracker", "message": "Adding CORS headers to response", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries/upload/", "status_code": 400}}
------------------------------ Captured log call -------------------------------
INFO     TimesheetTracker:logger.py:29 {"message": "Incoming request", "timestamp": "2025-02-11T19:31:10.666100", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "url": "http://testserver/time-entries/upload/", "client_host": "testclient", "headers": {"host": "testserver", "accept": "*/*", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "user-agent": "testclient", "content-length": "466", "content-type": "multipart/form-data; boundary=ea208d2a7d7667f2fe939bba7e9f10b5"}, "path_params": {}, "query_params": {}, "request_id": null, "path": "/time-entries/upload/"}}
INFO     TimesheetTracker:logger.py:32 {"message": "Processing timesheet upload: test.csv", "timestamp": "2025-02-11T19:31:10.668094", "context": {}}
WARNING  TimesheetTracker:logger.py:29 {"message": "Request failed with status 400", "timestamp": "2025-02-11T19:31:10.668761", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "status_code": 400, "method": "POST", "url": "http://testserver/time-entries/upload/", "process_time_ms": "2.85", "response_headers": {"content-length": "51", "content-type": "application/json"}, "error_detail": null, "query_params": {}, "path_params": {}, "client_host": "testclient", "path": "/time-entries/upload/", "origin": null, "cors_method": null, "cors_headers": null}}
DEBUG    TimesheetTracker:logger.py:29 {"message": "Adding CORS headers to response", "timestamp": "2025-02-11T19:31:10.669233", "context": {"correlation_id": "25e805e6-b305-4f0f-ab01-db99387cc11e", "method": "POST", "path": "/time-entries/upload/", "status_code": 400}}
=============================== warnings summary ===============================
.pythonlibs/lib/python3.11/site-packages/pydantic/_internal/_config.py:345
  /home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/pydantic/_internal/_config.py:345: UserWarning: Valid config keys have changed in V2:
  * 'orm_mode' has been renamed to 'from_attributes'
    warnings.warn(message, UserWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_file_upload.py::test_xls_analyzer_valid - ValueError: Faile...
FAILED tests/test_file_upload.py::test_xls_analyzer_invalid_data - ValueError...
FAILED tests/test_file_upload.py::test_upload_excel_valid - Failed: Fixture "...
FAILED tests/test_file_upload.py::test_xls_analyzer_date_conversion - ValueEr...
FAILED tests/test_file_upload.py::test_xls_analyzer_missing_columns - ValueEr...
FAILED tests/test_interfaces.py::test_project_interface - assert 500 == 200
FAILED tests/test_models.py::test_model_timestamps - assert datetime.datetime...
FAILED tests/test_repositories.py::test_time_entry_repository_create - Attrib...
FAILED tests/test_repositories.py::test_time_entry_repository_get_by_id - Att...
FAILED tests/test_repositories.py::test_time_entry_repository_get_by_date - A...
FAILED tests/test_repositories.py::test_time_entry_repository_get_all - Attri...
FAILED tests/test_repositories.py::test_time_entry_repository_update - Attrib...
FAILED tests/test_repositories.py::test_time_entry_repository_delete - Attrib...
FAILED tests/test_repositories.py::test_time_entry_repository_pagination - At...
FAILED tests/test_routes.py::test_create_time_entry - assert 200 == 201
FAILED tests/test_routes.py::test_get_time_entries_with_database_query - asse...
FAILED tests/test_routes.py::test_get_time_entries_complex_filtering - assert...
FAILED tests/test_routes.py::test_upload_excel_valid - assert 400 == 201
FAILED tests/test_routes.py::test_upload_csv_valid - assert 400 == 201
FAILED tests/test_routes.py::test_upload_csv_invalid_format - TypeError: Mult...
FAILED tests/test_routes.py::test_upload_csv_with_validation_errors - assert ...
FAILED tests/test_routes.py::test_upload_csv_with_foreign_key_violation - ass...
FAILED tests/test_routes.py::test_upload_csv_with_mismatched_customer_project
FAILED tests/test_routes.py::test_upload_csv_with_multiple_validation_errors
================= 24 failed, 6 deselected, 1 warning in 2.39s ==================
